namespace=WWMIv1

; Text Printing -------------------------

[CommandListPassWindowInfo]
; Pass a game window size to the shader
if window_width != 0
    x0 = window_width
    y0 = window_height
; Fall back to backup methods if user gets zeroes due to 3dmigoto bug
else if rt_width != 0
    x0 = rt_width
    y0 = rt_height
else
    x0 = res_width
    y0 = res_height
endif


[CommandListRenderText]
; Backup used IniParams
local $bak_x = x
local $bak_y = y
; Pass window size in a fail-safe way
run = CommandListPassWindowInfo
; Calculate positions of all chars
run = CustomShaderFormatText
; Renter formatted text
run = CustomShaderRenderText
; Restore IniParams:
x = $bak_x
y = $bak_y


[CustomShaderFormatText]
; The compute shader scans the text and breaks it up into smaller chunks for
; each geometry shader invocation to render (max 64 characters each),
; calculating the position on the screen where each chunk of text is positioned
; wrapping long lines as needed. This is only run when necessary, not every
; frame.
cs = Shaders/TextPrinter.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Pass resources to the shader
cs-t100 = ResourceFont
if ResourceText !== null
	cs-t113 = ResourceText
	cs-t114 = ResourceTextParams
	clear = ResourceTextPosition
	cs-u0 = ResourceTextPosition
    ; Run the compute shader
	dispatch = 1, 1, 1
endif
; Unbind resources
cs-u0 = null
cs-t100 = null
cs-t113 = null
cs-t114 = null


[CustomShaderRenderText]
; The vertex shader passes draw indexes to the geometry shader:
vs = Shaders/TextPrinter.hlsl
; The geometry shader generates the text for a given draw index:
gs = Shaders/TextPrinter.hlsl
; The pixel shader draws the font:
ps = Shaders/TextPrinter.hlsl
hs = null
ds = null
cs = null
; Allows us to use SV_Position.z to pack a texcoord, increasing the character
; limit per geometry shader invocation:
depth_clip_enable = false
; Disable front/back face culling so the vertices can be in any rotation
cull = none
; Enable alpha blending. To change the text colour, edit the pixel shader:
blend = add one inv_src_alpha
; Use points as the primitive from the vertex shader to the geometry shader:
topology = point_list
; run = CommandListUnbindAllRenderTargets
o0 = set_viewport no_view_cache bb
; Font is passed into the pixel shader (to draw it) *and* the geometry shader
; (as the character sizes are encoded in the final character of the font):
gs-t100 = ResourceFont
ps-t100 = ResourceFont
post gs-t100 = null
post ps-t100 = null
; Pass resources to the shader
gs-t112 = ResourceTextPosition
gs-t113 = ResourceText
gs-t114 = ResourceTextParams
ps-t114 = ResourceTextParams
; Draw vertices
; Change this number to limit how much text may be drawn:
draw = 4096, 0
; Unbind resources
gs-t112 = null
gs-t113 = null
gs-t114 = null
ps-t114 = null
ResourceText = null
ResourceTextParams = null


; Text Printing Resources -------------------------

; These resources hold the currently displayed help text and parameters. When
; ResourceText is null the shader will not be run:
[ResourceText]
[ResourceTextParams]


[ResourceFont]
; Note that this font has the size of each character embedded in the unused
; space of the final character, which the geometry shader uses to render each
; character the correct width. This font was generated with gen_bm_font.py,
; then converted to DDS (because our PNG loading seems to be broken o_O):
filename = Fonts/LiberationSans-Bold.dds


[ResourceTextPosition]
; A buffer passed from the formatting compute shader to the geometry shader,
; indicating which shader invocation draws which text at what position.
type = StructuredBuffer
stride = 16
array = 4096





; GUI -------------------------

[CommandListRenderGUI]

if time < 45
    ResourceText = ref ResourceVersionNotification
    ResourceTextParams = ref ResourceVersionNotificationParams
    run = CommandListPrintText
    if $first_run
        $show_user_guide = 1
        $first_run = 0
    endif
    run = CommandListShowCompatibilityModeNotification
endif

if $show_compatibility_mode_notification
    ResourceText = ref ResourceCompatibilityMode
    ResourceTextParams = ref ResourceUserGuideParams
    run = CommandListPrintText
endif

if $show_user_guide
    ResourceText = ref ResourceUserGuide
    ResourceTextParams = ref ResourceUserGuideParams
    run = CommandListPrintText
endif

if $show_hunting_mode_guide
    ResourceText = ref ResourceHuntingModeGuide
    ResourceTextParams = ref ResourceUserGuideParams
    run = CommandListPrintText
endif

if ResourceErrorIncompatibleVersionModNameRef !== null
    ResourceText = ref ResourceErrorIncompatibleVersionRef
    ResourceTextParams = ref ResourceUserNotificationParams
    run = CommandListPrintText

    ResourceText = ref ResourceErrorIncompatibleVersionModNameRef
    ResourceTextParams = ref ResourceErrorIncompatibleVersionModNameParams
    run = CommandListPrintText
endif


[CommandListHideNotification]
ResourceErrorIncompatibleVersionModNameRef = null


[CommandListShowCompatibilityModeNotification]
if $enable_compatibility_mode == -1
    $enable_compatibility_mode = 1
    $show_compatibility_mode_notification = 1
endif


; GUI Resources -------------------------

[ResourceUserGuide]
type = buffer
format = R8_UINT
filename = Notifications/UserGuide.md


[ResourceCompatibilityMode]
type = buffer
format = R8_UINT
filename = Notifications/CompatibilityMode.md


[ResourceHuntingModeGuide]
type = buffer
format = R8_UINT
filename = Notifications/HuntingModeGuide.md


[ResourceErrorOldVersionMod]
type = buffer
format = R8_UINT
filename = Notifications/ErrorOldVersionMod.md


[ResourceErrorCompatibilityModeDisabled]
type = buffer
format = R8_UINT
filename = Notifications/ErrorCompatibilityModeDisabled.md


[ResourceErrorOldVersionWWMI]
type = buffer
format = R8_UINT
filename = Notifications/ErrorOldVersionWWMI.md


[ResourceErrorIncompatibleVersionRef]
[ResourceErrorIncompatibleVersionModNameRef]


[ResourceUnnamedModName]
type = Buffer
data = "< Unnamed Mod >"


[ResourceUserNotificationParams]
type = StructuredBuffer
array = 1
data = R32_FLOAT  -0.25 +0.15 +0.25 -0.05   1.00 1.00 1.00 1.00   0.00 0.00 0.00 0.80   0.02  0.05   2 1   1   1.0
;                x1-^  y1-^  x2-^  y2-^   | R-^  G-^  B-^  A-^  | R-^  G-^  B-^  A-^  | ^-H    V-^ | ^ ^ | ^- text alignment: 0=left 1=center 2=right | ^- font scale
;                Rectangle (range -1:+1)  | Text Color          | Background Color    | Border     |  ^- h/v-anchor: 0=none 1=left/top 2=center 3=right/bottom 

[ResourceErrorIncompatibleVersionModNameParams]
type = StructuredBuffer
array = 1
data = R32_FLOAT  -0.25 +0.15 +0.25 -0.05   1.00 1.00 1.00 1.00   0.00 0.00 0.00 0.00   0.02  0.05   2 1   1   1.0
;                x1-^  y1-^  x2-^  y2-^   | R-^  G-^  B-^  A-^  | R-^  G-^  B-^  A-^  | ^-H    V-^ | ^ ^ | ^- text alignment: 0=left 1=center 2=right | ^- font scale
;                Rectangle (range -1:+1)  | Text Color          | Background Color    | Border     |  ^- h/v-anchor: 0=none 1=left/top 2=center 3=right/bottom 


[ResourceVersionNotificationParams]
type = StructuredBuffer
array = 1
data = R32_FLOAT  -0.95 -0.90 -0.00 -0.85   1.00 1.00 1.00 1.00   0.00 0.00 0.00 0.00   0.02  0.05   1 1   1   1.0
;                x1-^  y1-^  x2-^  y2-^   | R-^  G-^  B-^  A-^  | R-^  G-^  B-^  A-^  | ^-H    V-^ | ^ ^ | ^- text alignment: 0=left 1=center 2=right | ^- font scale
;                Rectangle (range -1:+1)  | Text Color          | Background Color    | Border     |  ^- h/v-anchor: 0=none 1=left/top 2=center 3=right/bottom 


[ResourceUserGuideParams]
type = StructuredBuffer
array = 1
data = R32_FLOAT  -0.40 +0.00 +0.40 -0.00   1.00 1.00 1.00 1.00   0.00 0.00 0.00 0.80   0.02  0.05   2 2   0   1.0
;                x1-^  y1-^  x2-^  y2-^   | R-^  G-^  B-^  A-^  | R-^  G-^  B-^  A-^  | ^-H    V-^ | ^ ^ | ^- text alignment: 0=left 1=center 2=right | ^- font scale
;                Rectangle (range -1:+1)  | Text Color          | Background Color    | Border     |  ^- h/v-anchor: 0=none 1=left/top 2=center 3=right/bottom 

; EoF -------------------------






; Prints text on screen using provided params
[CommandListPrintText]
; Input:
; Resource\WWMIv1\Text
; Resource\WWMIv1\TextParams
;
; Usage example (resource formats are listed below):
; Resource\WWMIv1\Text = ref ResourceMyText
; Resource\WWMIv1\TextParams = ref ResourceMyTextParams
; run = CommandList\WWMIv1\PrintText
run = CommandListRenderText

; Text string example resource printable by CommandListPrintText
[ResourceTextExample]
type = Buffer
data = "Hello World!"

; Text file example resource printable by CommandListPrintText
[ResourceTextFileExample]
type = buffer
format = R8_UINT
filename = MyText.txt

; Text params example resource for CommandListPrintText
; Using these parameter buffers as a way to pass in constant parameters without
; taking up any of the IniParams slots while still allowing the parameters to
; be customised on a per-message basis.
[ResourceTextParamsExample]
type = StructuredBuffer
array = 1
data = R32_FLOAT  -0.25 +0.15 +0.25 -0.05   1.00 1.00 1.00 1.00   0.00 0.00 0.00 0.95   0.02  0.05   2 1   1   1.0
;                x1-^  y1-^  x2-^  y2-^   | R-^  G-^  B-^  A-^  | R-^  G-^  B-^  A-^  | ^-H    V-^ | ^ ^ | ^- text alignment: 0=left 1=center 2=right | ^- font scale
;                Rectangle (range -1:+1)  | Text Color          | Background Color    | Border     |  ^- h/v-anchor: 0=none 1=left/top 2=center 3=right/bottom 

; Registers mod in WWMI and returns $mod_id
; If returned $mod_id == -1, mod must disable all its functions for user safety
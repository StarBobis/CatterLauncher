namespace=WWMIv1


; Sets value of custom Shape Key or override value of original one
[CommandListSetShapeKey]
; Input:
; $\WWMIv1\shapekey_id (int, range [0, 127])
; $\WWMIv1\shapekey_value (float, range [0.0, 1.0])
; cs-u5 = ResourceCustomShapeKeyValuesRW
;
; Usage example (set value override for Shape Key 86 to 0.5):
; $\WWMIv1\shapekey_id = 86
; $\WWMIv1\shapekey_value = 0.5
; cs-u5 = ResourceCustomShapeKeyValuesRW
; run = CommandList\WWMIv1\SetShapeKey
$shapekey_mode = 0
run = CustomShaderShapeKeySetter


; Disables value override of original Shape Key
[CommandListDisableShapeKeyOverride]
; Input:
; $\WWMIv1\shapekey_id (int, range [0, 127])
; cs-u5 = ResourceCustomShapeKeyValuesRW
;
; Usage example (disable value override for Shape Key 21):
; $\WWMIv1\shapekey_id = 21
; cs-u5 = ResourceCustomShapeKeyValuesRW
; run = CommandList\WWMIv1\DisableShapeKeyOverride
$shapekey_mode = 1
run = CustomShaderShapeKeySetter



; Shape Keys Override -------------------------

; Writes custom shape key values to provided RWBuffer
[CustomShaderShapeKeySetter]
; Load shader and explicitly unbind other shaders for safety
cs = Shaders/SkapeKeySetter.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Backup used IniParams
local $bak_x0 = x0
local $bak_y0 = y0
local $bak_z0 = z0
; Pass variables to the shader
x0 = $shapekey_mode
y0 = $shapekey_id
z0 = $shapekey_value
; Pass resources to the shader
; cs-u7 = ResourceDebugRW
; Run the compute shader
dispatch = 1, 1, 1
; Restore IniParams:
post x0 = $bak_x0
post y0 = $bak_y0
post z0 = $bak_z0

; Updates provided RWBuffer that stores offsets of shapekeyed vertex lists, shape key values and multipliers
[CustomShaderShapeKeyOverrider]
; Load shader and explicitly unbind other shaders for safety
cs = Shaders/ShapeKeyOverrider.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Backup used IniParams
local $bak_x0 = x0
; Pass variables to the shader
; Inputs:
; $\WWMIv1\shapekey_checksum = 1415
x0 = $shapekey_checksum
; Pass resources to the shader
; Inputs:
; cs-t33 = ResourceShapeKeyOffsetBuffer
; cs-u5 = ResourceCustomShapeKeyValuesRW
; cs-u6 = ResourceShapeKeyCBRW
; cs-u7 = ResourceDebugRW
; Run the compute shader
Dispatch = 1, 1, 1
; Unbind resources
cs-t33 = null
cs-u5 = null
cs-u6 = null
; Restore IniParams:
post x0 = $bak_x0

; Overides original Shape Key Loader CS call
[ShaderOverrideShapeKeyLoaderCS]
hash = 3222cf3da3006e93
allow_duplicate_hash = true
filter_index = 3381.3333
; Fire callbacks for mods that are listening on cs-u0 slot (shape key data)
if $enable_mods
    if cs-u0 >= 1
        checktextureoverride = cs-u0
    endif
endif

; Loads xyz offsets for each vertex and global shape key multiplier to xyz offsets
[CustomShaderShapeKeyLoader]
; Load shader and explicitly unbind other shaders for safety
cs = Shaders/ShapeKeyLoader.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Pass variables to the shader
; Inputs:
; $\WWMIv1\shapekey_vertex_count = $shapekey_vertex_count
; Pass resources to the shader
; Inputs:
; cs-t0 = ResourceShapeKeyVertexIdBuffer
; cs-t1 = ResourceShapeKeyVertexOffsetBuffer
; cs-u6 = ResourceShapeKeyCBRW
; cs-u7 = ResourceDebugRW
; Run the compute shader
local $dispatch_y = $shapekey_vertex_count/32+1
if $dispatch_y < THREAD_GROUP_COUNT_Y
    $dispatch_y = THREAD_GROUP_COUNT_Y
endif
dispatch = 1, $dispatch_y, 1
; Unbind resources
cs-u6 = null

; Overides original Shape Key Multiplier CS call
[ShaderOverrideShapeKeyMultiplierCS]
hash = 7a8396180d416117
allow_duplicate_hash = true
filter_index = 3381.4444
; Fire callbacks for mods that are listening on cs-u0 slot (shape key data)
if $enable_mods
    if cs-u0 >= 1
        checktextureoverride = cs-u0
    endif
endif


; Applies dynamic unique per-character shape key multiplier to xyz offsets 
[CustomShaderShapeKeyMultiplier]
; Load shader and explicitly unbind other shaders for safety
cs = Shaders/ShapeKeyMultiplier.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Pass variables to the shader
; Inputs:
; $\WWMIv1\shapekey_vertex_count = $shapekey_vertex_count
; Pass resources to the shader
; cs-u7 = ResourceDebugRW
; Run the compute shader
local $dispatch_y = $custom_vertex_count/32+1
if $dispatch_y < THREAD_GROUP_COUNT_Y
    $dispatch_y = THREAD_GROUP_COUNT_Y
endif
dispatch = 1, $dispatch_y, 1


; Applies shape key xyz offsets to position buffer data
[CustomShaderShapeKeyApplier]
; Load shader and explicitly unbind other shaders for safety
cs = Shaders/ShapeKeyApplier.hlsl
vs = null
ps = null
hs = null
ds = null
gs = null
; Backup used IniParams
local $bak_x0 = x0
local $bak_y0 = y0
; Pass variables
x0 = $custom_vertex_offset
y0 = $custom_vertex_count
; Pass variables to the shader
; Inputs:
; $\WWMIv1\shapekey_vertex_count = $shapekey_vertex_count
; Pass resources to the shader
cs-u7 = ResourceDebugRW
; Run the compute shader
dispatch = $custom_vertex_count/64+1, 1, 1
; Restore IniParams:
post x0 = $bak_x0
post y0 = $bak_y0





